## Exercise 1

1. [process_client -> http_request_line -> url_decode]
`reqpath` is a 4096 byte buffer stored on the stack frame of `process_client`.
It is passed as an argument into `http_request_line`, which reads the HTTP request line.
In particular, it reads the entire line into `buf`, which is 8192 bytes. 

The function determines the location of the request-uri in the buffer and calls `url_decode`
to copy the request-uri into `reqpath` and decode any escape sequences in the URL.
Since 8192 is double the size of 4096, there is ample room to construct a valid HTTP request line
(valid in the sense that it contains a request method, request-uri, and the protocol to pass
those checks before `url_decode` is called) that is able to overflow `reqpath` due to a long
`reqpath`

Care must be taken if the goal is to perform code injection / return address overwriting
because the characters '%' and '+' (0x25 and 0x2B, respectively) trigger the URL decoding
so the actual bytes written to `reqpath` may be different than intended.

2. [process_client -> http_request_headers -> url_decode]
Similar to the above.

## Exercise 6

1. The server performs no validation of the filepaths requested in `http_serve_file`.
As such, you can access anything on the directory the server is hosted on. This can be
problematic as sensitive data can be exposed, which occurs in this case because the
db/person/person.db file contains an unencrypted version of information on users, including
passwords. A simple fix would be to either move the executable to a safer location or 
perform checks on the files requested.

